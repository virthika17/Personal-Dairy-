import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

public class Main {
    private static final String DATA_DIR = "data";
    private static final DateTimeFormatter FILE_TS = DateTimeFormatter.ofPattern("yyyy-MM-dd_HHmmss");

    public static void main(String[] args) {
        ensureDataDir();
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        while (true) {
            System.out.println("\n=== Personal Diary ===");
            System.out.println("1) Add entry");
            System.out.println("2) List entries (latest first)");
            System.out.println("3) View entry");
            System.out.println("4) Search entries");
            System.out.println("5) Delete entry");
            System.out.println("0) Exit");
            System.out.print("Choose: ");
            try {
                String choice = in.readLine();
                if (choice == null) break;
                switch (choice.trim()) {
                    case "1": addEntry(in); break;
                    case "2": listEntries(); break;
                    case "3": viewEntry(in); break;
                    case "4": searchEntries(in); break;
                    case "5": deleteEntry(in); break;
                    case "0": System.out.println("Bye!"); return;
                    default: System.out.println("Invalid choice.");
                }
            } catch (IOException e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    private static void ensureDataDir() {
        try {
            Files.createDirectories(Paths.get(DATA_DIR));
        } catch (IOException e) {
            System.out.println("Failed to create data directory: " + e.getMessage());
        }
    }

    private static void addEntry(BufferedReader in) throws IOException {
        System.out.print("Title: ");
        String title = in.readLine();
        if (title == null || title.trim().isEmpty()) {
            System.out.println("Title is required.");
            return;
        }
        System.out.println("Write your entry (finish with a single line ':wq'):");
        StringBuilder body = new StringBuilder();
        while (true) {
            String line = in.readLine();
            if (line == null || line.equals(":wq")) break;
            body.append(line).append(System.lineSeparator());
        }

        String slug = title.toLowerCase().replaceAll("[^a-z0-9]+", "-").replaceAll("(^-|-$)", "");
        if (slug.length() > 24) slug = slug.substring(0, 24);
        String filename = FILE_TS.format(LocalDateTime.now()) + "_" + (slug.isEmpty() ? "note" : slug) + ".txt";
        Path path = Paths.get(DATA_DIR, filename);

        try (BufferedWriter bw = Files.newBufferedWriter(path, StandardCharsets.UTF_8, StandardOpenOption.CREATE_NEW)) {
            bw.write(title);
            bw.write(System.lineSeparator());
            bw.write(System.lineSeparator());
            bw.write(body.toString());
        }
        System.out.println("Saved: " + path.toAbsolutePath());
    }

    private static List<Path> listFilesSorted() throws IOException {
        try (DirectoryStream<Path> ds = Files.newDirectoryStream(Paths.get(DATA_DIR), "*.txt")) {
            List<Path> files = new ArrayList<>();
            for (Path p : ds) files.add(p);
            // sort by filename desc (timestamp prefix ensures chronological order)
            files.sort(Comparator.<Path, String>comparing(p -> p.getFileName().toString()).reversed());
            return files;
        }
    }

    private static String firstLine(Path p) {
        try {
            List<String> lines = Files.readAllLines(p, StandardCharsets.UTF_8);
            for (String s : lines) if (!s.trim().isEmpty()) return s.trim();
        } catch (IOException ignored) {}
        return "(no title)";
    }

    private static void listEntries() {
        try {
            List<Path> files = listFilesSorted();
            if (files.isEmpty()) {
                System.out.println("No entries yet.");
                return;
            }
            int i = 1;
            for (Path p : files) {
                System.out.printf("%2d) %s — %s%n", i++, p.getFileName().toString(), firstLine(p));
            }
        } catch (IOException e) {
            System.out.println("Failed to list entries: " + e.getMessage());
        }
    }

    private static void viewEntry(BufferedReader in) throws IOException {
        List<Path> files = listFilesSorted();
        if (files.isEmpty()) { System.out.println("No entries to view."); return; }
        listEntries();
        System.out.print("Enter number to view: ");
        int n = parseIndex(in.readLine(), files.size());
        if (n == -1) return;
        Path p = files.get(n);
        System.out.println("\n--- " + p.getFileName() + " ---");
        System.out.println(new String(Files.readAllBytes(p), StandardCharsets.UTF_8));
        System.out.println("--- end ---");
    }

    private static void searchEntries(BufferedReader in) throws IOException {
        System.out.print("Keyword: ");
        String q = in.readLine();
        if (q == null || q.trim().isEmpty()) { System.out.println("Keyword is required."); return; }
        String ql = q.toLowerCase();

        List<Path> files = listFilesSorted();
        List<Path> matches = new ArrayList<>();
        for (Path p : files) {
            String content = new String(Files.readAllBytes(p), StandardCharsets.UTF_8).toLowerCase();
            if (content.contains(ql)) matches.add(p);
        }
        if (matches.isEmpty()) {
            System.out.println("No matches found.");
            return;
        }
        System.out.println("Matches:");
        int i = 1;
        for (Path p : matches) {
            System.out.printf("%2d) %s — %s%n", i++, p.getFileName().toString(), firstLine(p));
        }
    }

    private static void deleteEntry(BufferedReader in) throws IOException {
        List<Path> files = listFilesSorted();
        if (files.isEmpty()) { System.out.println("No entries to delete."); return; }
        listEntries();
        System.out.print("Enter number to delete: ");
        int n = parseIndex(in.readLine(), files.size());
        if (n == -1) return;
        Path p = files.get(n);
        System.out.print("Delete '" + p.getFileName() + "'? (y/N): ");
        String ans = in.readLine();
        if (ans != null && ans.trim().equalsIgnoreCase("y")) {
            Files.delete(p);
            System.out.println("Deleted.");
        } else {
            System.out.println("Cancelled.");
        }
    }

    private static int parseIndex(String s, int size) {
        try {
            int n = Integer.parseInt(s.trim());
            if (n < 1 || n > size) {
                System.out.println("Out of range.");
                return -1;
            }
            return n - 1;
        } catch (Exception e) {
            System.out.println("Invalid number.");
            return -1;
        }
    }
}
